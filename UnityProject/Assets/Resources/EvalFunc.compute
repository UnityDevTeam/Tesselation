#pragma kernel ComputeDensity
//#pragma kernel CSEvalAtom
RWTexture3D<float4> Result;
StructuredBuffer<float4> molPositions;
float3 dx;
float3 minBox;
int atomCount;
int numParticles;





static float SR=1.3;
float eval(in float3 p) 
{
	float S=0;
	[loop]
    for (int i=0;i<atomCount;i++)
	{
		float3 apt = molPositions[i].xyz;
		float radius = molPositions[i].w;
		float3 YD = apt - p;
		float r = dot(YD,YD);
		float b = SR*SR;
		float a = -log(0.5f/b)/(radius*radius);
		float gauss_f = b*exp(-(r*a));
		S+=gauss_f;
		//lfadksadslkj
		//nml = nml + 2.0*b*a*gauss_f*YD;
	}  
	return S;
}

[numthreads(8,8,8)]
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
	float3 vol_pos = float3(id.x,id.y,id.z);
	float3 p = minBox + vol_pos*dx;
	float fval = eval(p);
	//fval = 0.1 + vol_pos.x/32.0;
	float4 c;
	c.r = c.g = c.b = c.w = fval;
	Result[id] = c;
}




////////////////////////////////////////////////////////////////////////////////////////
struct SimParams
{
	uint gridSize;
	uint numCells;
	uint cellSize;	

	float boxSize;
	float boxHalfSize;	
	float3 boxCenter;
};

RWStructuredBuffer<unsigned int> gridParticleHash: register( u0 );
RWStructuredBuffer<unsigned int> gridParticleIndex: register( u1 );
RWStructuredBuffer<float4> sortedPos: register( u2 );
RWStructuredBuffer<unsigned int> cellEnd: register( u3 );
RWStructuredBuffer<unsigned int> cellStart: register( u4 );
RWStructuredBuffer<float4> oldPos: register( u5 );


// Calculate position in uniform grid
int3 calcGridPos(float3 p)
{
    int3 gridPos;
    gridPos.x = floor((p.x - params.boxCenter.x) / params.cellSize);
    gridPos.y = floor((p.y - params.boxCenter.y) / params.cellSize);
    gridPos.z = floor((p.z - params.boxCenter.z) / params.cellSize);
    return gridPos;
}

// Calculate address in grid from position (clamping to edges)
uint calcGridHash(int3 gridPos)
{
    gridPos.x = gridPos.x & (params.gridSize-1);  // wrap grid, assumes size is power of 2
    gridPos.y = gridPos.y & (params.gridSize-1);
    gridPos.z = gridPos.z & (params.gridSize-1);
    return gridPos.z * params.gridSize) * params.gridSize + gridPos.y * params.gridSize + gridPos.x;
}

[numthreads(8,8,8)]
void CalcHash(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;

    if (index >= numParticles) return;

    volatile float4 p = molPositions[index];

    // get address in grid
    int3 gridPos = calcGridPos(make_float3(p.x, p.y, p.z));
    uint hash = calcGridHash(gridPos);

    // store grid hash and particle index
    gridParticleHash[index] = hash;
    gridParticleIndex[index] = index;
}


groupshared unsigned int sharedHash[Blocksize];
[numthreads(BlockSize, 8, 8)]
void reorderDataAndFindCellStartSimpleD(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
//    extern __shared__ uint sharedHash[];    // blockSize + 1 elements
//    uint index = __umul24(blockIdx.x,blockDim.x) + threadIdx.x;
	uint index = DTid.x;

    uint hash;

    // handle case when no. of particles not multiple of block size
    if (index < numParticles)
	{
        hash = gridParticleHash[index];

        // Load hash data into shared memory so that we can look
        // at neighboring particle's hash value without loading
        // two hash values per thread
        sharedHash[threadIdx.x+1] = hash;

        if (index > 0 && threadIdx.x == 0)
        {
            // first thread in block must load neighbor particle hash
            sharedHash[0] = gridParticleHash[index-1];
        }
    }

//    __syncthreads();
	GroupMemoryBarrierWithGroupSync();

    if (index < numParticles)
    {
        // If this particle has a different cell index to the previous
        // particle then it must be the first particle in the cell,
        // so store the index of this particle in the cell.
        // As it isn't the first particle, it must also be the cell end of
        // the previous particle's cell

        if (index == 0 || hash != sharedHash[threadIdx.x])
        {
            cellStart[hash] = index;

            if (index > 0)
                cellEnd[sharedHash[threadIdx.x]] = index;
        }

        if (index == numParticles - 1)
        {
            cellEnd[hash] = index + 1;
        }

        // Now use the sorted index to reorder the pos and vel data
        uint sortedIndex = gridParticleIndex[index];
        float4 pos = oldPos[sortedIndex];

        sortedPos[index] = pos;
    }
}

void sortParticles(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{

}

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
StructuredBuffer<unsigned int> Input : register( t0 );
RWStructuredBuffer<unsigned int> Data : register( u0 );
uint *dGridParticleHash, uint *dGridParticleIndex, uint numParticles
//--------------------------------------------------------------------------------------
// Bitonic Sort Compute Shader
//--------------------------------------------------------------------------------------
groupshared unsigned int shared_data[BITONIC_BLOCK_SIZE];

[numthreads(BITONIC_BLOCK_SIZE, 1, 1)]
void BitonicSort( uint3 Gid : SV_GroupID, 
                  uint3 DTid : SV_DispatchThreadID, 
                  uint3 GTid : SV_GroupThreadID, 
                  uint GI : SV_GroupIndex )
{
    // Load shared data
    shared_data[GI] = Data[DTid.x];
    GroupMemoryBarrierWithGroupSync();
    
    // Sort the shared data
    for (unsigned int j = g_iLevel >> 1 ; j > 0 ; j >>= 1)
    {
        unsigned int result = ((shared_data[GI & ~j] <= shared_data[GI | j]) == (bool)(g_iLevelMask & DTid.x))? shared_data[GI ^ j] : shared_data[GI];
        GroupMemoryBarrierWithGroupSync();
        shared_data[GI] = result;
        GroupMemoryBarrierWithGroupSync();
    }
    
    // Store shared data
    Data[DTid.x] = shared_data[GI];
}
/*
int3 getVoxel(in float3 p)
{
	int3 id = (p-minBox)/dx;
	return id;
}

[numthreads(1000,1,1)]
void CSEvalAtom(uint3 id : SV_DispatchThreadID)
{
	uint atomidx = id.x;
	float4 apt = molPositions[i];
	float radius = apt.w;
	float3 vol_pos = float3(id.x,id.y,id.z);
	float3 p = minBox + vol_pos*dx;
	float fval = eval(p);
	//fval = 0.1 + vol_pos.x/32.0;
	float4 c;
	c.r = c.g = c.b = c.w = fval;
	Result[id] = c;
}
*/
